// <auto-generated />
using System;
using FC_MVVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FC_MVVC.data.migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181002084749_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FC_MVVC.Data.Models.WeightLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("UserId");

                    b.Property<float>("WeightValue");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");

                    b.HasData(
                        new { Id = new Guid("e8d197c7-9731-4520-9c62-2f5c9d90b466"), LogDate = new DateTime(2018, 10, 2, 10, 47, 48, 541, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 80f },
                        new { Id = new Guid("f1ad5f1d-cc03-4b20-aed8-d75919fe3e6e"), LogDate = new DateTime(2018, 10, 3, 10, 47, 48, 543, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 81f },
                        new { Id = new Guid("abe94bfc-c620-45cc-b35c-e00b217a3b45"), LogDate = new DateTime(2018, 10, 4, 10, 47, 48, 543, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 82f },
                        new { Id = new Guid("7992d114-4988-4493-ad8c-259d164b8ae0"), LogDate = new DateTime(2018, 10, 5, 10, 47, 48, 543, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 83f },
                        new { Id = new Guid("98ca5f55-4c40-492f-b4ce-bff7acfcb994"), LogDate = new DateTime(2018, 10, 6, 10, 47, 48, 543, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 84f },
                        new { Id = new Guid("d54d3156-dda1-48e3-a63d-b56d8cab1278"), LogDate = new DateTime(2018, 10, 7, 10, 47, 48, 543, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 85f },
                        new { Id = new Guid("3b1513dd-9884-4f28-8dd0-8e4ed4bb27f4"), LogDate = new DateTime(2018, 10, 8, 10, 47, 48, 543, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 86f },
                        new { Id = new Guid("70866753-a2f6-41aa-9fb9-fb1ae1da0b83"), LogDate = new DateTime(2018, 10, 9, 10, 47, 48, 543, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 87f },
                        new { Id = new Guid("4ab38c8a-d986-4251-a0cd-19fc4aa5e624"), LogDate = new DateTime(2018, 10, 10, 10, 47, 48, 543, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 88f },
                        new { Id = new Guid("53dc148a-cdaf-4f90-93ab-4766ba859292"), LogDate = new DateTime(2018, 10, 11, 10, 47, 48, 543, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 89f },
                        new { Id = new Guid("b5b0244f-b0b1-4c1e-83f6-e6c533ef6ecc"), LogDate = new DateTime(2018, 10, 2, 10, 47, 48, 543, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 80f },
                        new { Id = new Guid("4946a265-2a23-4091-b857-ea039ddc1bb6"), LogDate = new DateTime(2018, 10, 3, 10, 47, 48, 543, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 81f },
                        new { Id = new Guid("44af1c40-d762-431f-b986-fcb1b76c0517"), LogDate = new DateTime(2018, 10, 4, 10, 47, 48, 543, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 82f },
                        new { Id = new Guid("3628b1eb-bd1a-4e26-8dc1-cd9aebafc24e"), LogDate = new DateTime(2018, 10, 5, 10, 47, 48, 543, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 83f },
                        new { Id = new Guid("c8fd7f2e-b217-4edc-aebb-e0c4dd7ae17e"), LogDate = new DateTime(2018, 10, 6, 10, 47, 48, 543, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 84f },
                        new { Id = new Guid("3871ff75-c3ce-446c-8bfa-264b9e8c6b8e"), LogDate = new DateTime(2018, 10, 7, 10, 47, 48, 543, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 85f },
                        new { Id = new Guid("0fd39b10-434d-4dcf-a17c-f2cb1634497b"), LogDate = new DateTime(2018, 10, 8, 10, 47, 48, 543, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 86f },
                        new { Id = new Guid("0597837d-d31b-4216-960d-16c3faa12a3c"), LogDate = new DateTime(2018, 10, 9, 10, 47, 48, 543, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 87f },
                        new { Id = new Guid("89a04c45-73a5-4d4e-9a27-444b9a16ce25"), LogDate = new DateTime(2018, 10, 10, 10, 47, 48, 543, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 88f },
                        new { Id = new Guid("b11896fd-704a-48a5-98e7-dc39387ad9bc"), LogDate = new DateTime(2018, 10, 11, 10, 47, 48, 543, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 89f }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FC_MVVC.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("MeasureType");

                    b.Property<string>("PublicInfo");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new { Id = "2204dae4-6cb2-4dbd-aac8-972d486ed767", AccessFailedCount = 0, ConcurrencyStamp = "1a148bbb-a33f-4f3c-a38a-53b640e58c14", Email = "ana.anic@gmail.com", EmailConfirmed = false, LockoutEnabled = false, NormalizedEmail = "ANA.ANIC@GMAIL.COM", NormalizedUserName = "ANA.ANIC@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAELDDBjldTca23egUkVYyY+T1RPphJETIEqcDq142PV6dR2hy4Zbu0d7VHlmzZDVrOg==", PhoneNumberConfirmed = false, SecurityStamp = "d790a802-fd7c-418a-972e-e051f6d1601a", TwoFactorEnabled = false, UserName = "ana.anic@gmail.com", FirstName = "Ana", LastName = "Anic", MeasureType = 0 },
                        new { Id = "a5ee4b19-904d-4834-9faf-3074b29c6551", AccessFailedCount = 0, ConcurrencyStamp = "f6fbdcdc-42ce-49a6-8630-faf4ec7e9e77", Email = "pero.peric@gmail.com", EmailConfirmed = false, LockoutEnabled = false, NormalizedEmail = "PERO.PERIC@GMAIL.COM", NormalizedUserName = "PERO.PERIC@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAELDDBjldTca23egUkVYyY+T1RPphJETIEqcDq142PV6dR2hy4Zbu0d7VHlmzZDVrOg==", PhoneNumberConfirmed = false, SecurityStamp = "735d6606-924b-42d1-8e47-9993de0f5585", TwoFactorEnabled = false, UserName = "pero.peric@gmail.com", FirstName = "Pero", LastName = "Peric", MeasureType = 0 }
                    );
                });

            modelBuilder.Entity("FC_MVVC.Data.Models.WeightLog", b =>
                {
                    b.HasOne("FC_MVVC.Data.Models.ApplicationUser", "User")
                        .WithMany("WeightLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
